Q1) (a) An instance variable is specific for instances of an class(each instance has its own copy of the variable) whereas a static variable is held at the class level where each static variable has a common value for all instances of that object. 

(b) By putting the keyword "final" before the type. 
	public static final int PI_VALUE=3.142;

(c)An interface type allows an object to hold references to objects of all classes that implement that interface whereas a class type only allows an object to hold references to objects of that class or objects of its subclasses. It's also important to note that a class can implement as many interfaces as it likes whereas a class can only inherit from a single classs.

(d) (3) > 3 && true

	false : boolean



Q2) 
(a)
public static int getUcasTariff(String grade)
{
	int marks; 

	if(grade.equals("A*"))
		marks=56;
	else if(grade.equals("A"))
		marks=48;
	else if(grade.equals("B"))
		marks=40;
	else if(grade.equals("C"))
		marks=32;
	else if(grade.equals("D"))
		marks=24;
	else if(grade.equals("E"))
		marks=16;
	else
		marks=0;

	return marks; 			
}

(b)
public static int getTotalUcasTariff(String[] grades)
{
	int totalMarks=0;
	
	for(String grade: grades)
		totalMarks+=getUcasTariff(grade);

	return totalMarks;
}

Q3)


Q4)


Q5) 
public static double[] multiply(double factor, double[] vector)
{
	double[] newVector=new double[vector.length];

	for(int i=0; i<vector.length ; i++)
		newVector[i]=vector[i]*factor;

	return newVector;

}


Q6)

1,2,3,4
	//k=3-1=2
	//a[2]=2*a[1]=4
	//array={1,2,4,4}
1,2,4,4
	//k=4-1=3
	//a[3]=2*a[2]=8
	//array={1,2,4,8}
1,2,4,8


Q7)

public class ComboLock
{
	private int[] key;
	private int count;
	private int[] code;

	public ComboLock(int k1, int k2, int k3)
	{
		key[0]=k1;
		key[1]=-k2;
		key[2]=k3;

		
		count=0;
		code=new int[3]; 
	}

	public void reset()
	{
		count=0;	
	}	

	public void turnClockwise(int position)
	{
		if(count<2)
		{
			code[count++]= +position; 
		}
		else
		{
			code[0]=count[1];
			code[1]=count[2];
			code[2]= +position;

		}
	
	}


	public void turnCountClockwise(int position)
	{
		turnClockwise(-position);

	}

	public boolean open()
	{
		return ( code[0]==key[0] && code[1]==key[1] && code[2]==key[2] );
	}

}



Q8)

public static void printSubstrings(String word)
{
	for(int len=1; len<=word.length() ; len++)
	{
		for(int i=0; i+len <= word.length() ; i++)
			System.out.println(word.substring(i,i+len));
	}

}



Q9) 

t1.b=100
T18.g=101
t1.s="t1"

//t1: 100/101

t2.b=101
T18.g=102
t2.s="t2"

//t2: 101/102

t3.b=102
T18.g=103
t3.s="t3"

//t3: 102/103




Q18) 

(1) this.n=n 
(2) i%2 == 1
(3) new Q18(3); 
(4) g.n private
(5) String greeting has already been defined




































